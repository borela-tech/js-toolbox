// Licensed under the Apache License, Version 2.0 (the “License”); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an “AS IS” BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

import MultiSpinner from './MultiSpinner'
import TaskSpinner from './spinners/Task'
import Tty from './Tty'

import Spinner from './Spinner'
import Visual from './Visual'

import {
  LOG_MESSAGE,
  TASK_STARTED,
  TASK_STOPPED,
  TASK_UPDATED,
} from '../events'

/**
 * Updates the UI according to events generated by the system.
 *
 * @param store
 * Store that holds the CLI’s state.
 * @param eventBus
 * Communication bus used to receive events.
 */
export function setUpUi(store, eventBus) {
  if (!process.stdout.isTTY)
    return

  const SPINNER = new MultiSpinner
  const TTY = new Tty(SPINNER)

  eventBus.subscribe(event => {
    let {type, payload} = event

    switch (type) {
      case LOG_MESSAGE:
        TTY.writeLine(payload)
        break

      case TASK_STARTED: {
        let {name, ...args} = payload
        SPINNER.addSpinner(name, new TaskSpinner(args))
        break
      }

      case TASK_STOPPED:
        SPINNER.removeSpinner(payload)
        break

      case TASK_UPDATED: {
        let {name, ...args} = payload
        SPINNER.updateSpinner(name, args)
        break
      }
    }
  })

  TTY.start()
}
